name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

jobs:
  test:
    name: Test SDKs
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x, 24.x]
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]
        java-version: [11, 17, 21]
        go-version: [1.19, 1.20, 1.21, 1.22, 1.23, 1.24, 1.25]
        dotnet-version: [6.0.x, 7.0.x, 8.0.x]
        rust-toolchain: [stable]

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Setup Java ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'

    - name: Setup Go ${{ matrix.go-version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Setup .NET ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    - name: Setup Rust ${{ matrix.rust-toolchain }}
      uses: dtolnay/rust-toolchain@stable

    - name: Install dependencies
      run: npm install

    - name: Bootstrap packages
      run: |
        # Only bootstrap packages that have package.json
        for pkg in packages/*; do
          if [ -f "$pkg/package.json" ]; then
            echo "Bootstrapping $pkg"
            cd $pkg && npm install && cd ../..
          fi
        done

    - name: Run linting
      run: |
        # Lint packages based on their type
        for pkg in packages/*; do
          if [ -f "$pkg/package.json" ]; then
            echo "Linting $pkg (npm)"
            cd $pkg && npm run lint && cd ../..
          elif [ -f "$pkg/pyproject.toml" ]; then
            echo "Linting $pkg (python)"
            cd $pkg && python3 -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics && cd ../..
          elif [ -f "$pkg/pom.xml" ]; then
            echo "Linting $pkg (maven)"
            cd $pkg && mvn checkstyle:check && cd ../..
          elif [ -f "$pkg/go.mod" ]; then
            echo "Linting $pkg (go)"
            cd $pkg && golangci-lint run && cd ../..
          elif [ -f "$pkg/TavoAI.csproj" ]; then
            echo "Linting $pkg (.NET)"
            cd $pkg && dotnet format --verify-no-changes && cd ../..
          elif [ -f "$pkg/Cargo.toml" ]; then
            echo "Linting $pkg (rust)"
            cd $pkg && cargo clippy -- -D warnings && cd ../..
          fi
        done

    - name: Run tests
      run: |
        # Test packages based on their type
        for pkg in packages/*; do
          if [ -f "$pkg/package.json" ]; then
            echo "Testing $pkg (npm)"
            cd $pkg && npm test && cd ../..
          elif [ -f "$pkg/pyproject.toml" ]; then
            echo "Testing $pkg (python)"
            cd $pkg && python3 -m pytest && cd ../..
          elif [ -f "$pkg/pom.xml" ]; then
            echo "Testing $pkg (maven)"
            cd $pkg && mvn test && cd ../..
          elif [ -f "$pkg/go.mod" ]; then
            echo "Testing $pkg (go)"
            cd $pkg && go test ./... && cd ../..
          elif [ -f "$pkg/TavoAI.csproj" ]; then
            echo "Testing $pkg (.NET)"
            cd $pkg && dotnet test && cd ../..
          elif [ -f "$pkg/Cargo.toml" ]; then
            echo "Testing $pkg (rust)"
            cd $pkg && cargo test && cd ../..
          fi
        done

    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        fail_ci_if_error: false

  build:
    name: Build SDKs
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: 20
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install dependencies
      run: npm install

    - name: Bootstrap packages
      run: |
        # Only bootstrap packages that have package.json
        for pkg in packages/*; do
          if [ -f "$pkg/package.json" ]; then
            echo "Bootstrapping $pkg"
            cd $pkg && npm install && cd ../..
          fi
        done

    - name: Build all packages
      run: |
        # Build packages based on their type
        for pkg in packages/*; do
          if [ -f "$pkg/package.json" ]; then
            echo "Building $pkg (npm)"
            cd $pkg && npm run build && cd ../..
          elif [ -f "$pkg/pyproject.toml" ]; then
            echo "Building $pkg (python)"
            cd $pkg && python3 -m pip install -e . && cd ../..
          elif [ -f "$pkg/pom.xml" ]; then
            echo "Building $pkg (maven)"
            cd $pkg && mvn compile && cd ../..
          elif [ -f "$pkg/go.mod" ]; then
            echo "Building $pkg (go)"
            cd $pkg && go build ./... && cd ../..
          elif [ -f "$pkg/TavoAI.csproj" ]; then
            echo "Building $pkg (.NET)"
            cd $pkg && dotnet build && cd ../..
          elif [ -f "$pkg/Cargo.toml" ]; then
            echo "Building $pkg (rust)"
            cd $pkg && cargo build --release && cd ../..
          fi
        done

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: built-packages
        path: |
          packages/*/dist/
          packages/*/build/

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: 20
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Bootstrap packages
      run: npm run bootstrap

    - name: Build packages
      run: npm run build

    - name: Publish Python SDK
      if: startsWith(github.event.release.tag_name, 'python')
      run: |
        cd packages/python
        python -m pip install --upgrade pip
        pip install build twine
        python -m build
        twine upload dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}

    - name: Publish JavaScript SDK
      if: startsWith(github.event.release.tag_name, 'js')
      run: |
        cd packages/javascript
        npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Publish Java SDK
      if: startsWith(github.event.release.tag_name, 'java')
      run: |
        cd packages/java
        ./gradlew publish
      env:
        MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}

    - name: Publish Go SDK
      if: startsWith(github.event.release.tag_name, 'go')
      run: |
        cd packages/go
        git tag ${GITHUB_REF#refs/tags/}
        git push origin ${GITHUB_REF#refs/tags/}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish .NET SDK
      if: startsWith(github.event.release.tag_name, 'dotnet')
      run: |
        cd packages/dotnet
        dotnet nuget push "bin/Release/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json

    - name: Publish Rust SDK
      if: startsWith(github.event.release.tag_name, 'rust')
      run: |
        cd packages/rust
        cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: 20
        cache: 'npm'

    - name: Setup Pages
      uses: actions/configure-pages@v5

    - name: Install dependencies
      run: |
        cd docs-site
        npm ci

    - name: Build documentation
      run: |
        cd docs-site
        npm run build

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v4
      with:
        path: docs-site/build/tavo-api

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4