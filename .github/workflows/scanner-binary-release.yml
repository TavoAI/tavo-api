name: Scanner Binary Release

on:
  push:
    branches: [main]
    paths:
      - "packages/scanner/**"
      - "tavo-rules/bundles/llm-security/**"
      - "build_binary.sh"
      - ".github/workflows/scanner-binary-release.yml"
  workflow_dispatch:
    inputs:
      version:
        description: "Version tag (e.g., v1.0.0)"
        required: true
        type: string
      prerelease:
        description: "Mark as prerelease"
        required: false
        default: false
        type: boolean

jobs:
  build-binaries:
    name: Build Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: ubuntu-24.04-arm
            platform: linux
            arch: arm64
          - os: windows-latest
            platform: windows
            arch: x64
          - os: windows-11-arm
            platform: windows
            arch: arm64
          - os: macos-latest
            platform: macos
            arch: x64
          - os: macos-latest
            platform: macos
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller pyyaml
          if [ "${{ runner.os }}" == "Windows" ]; then
            echo "Installing unzip for Windows..."
            choco install unzip || echo "choco install failed, trying alternative..."
          fi
        shell: bash

      - name: Download engines
        run: |
          cd packages/scanner
          echo "Current directory: $(pwd)"
          echo "Running download_engines.js..."
          node download_engines.js
          echo "Checking engines directory after download..."
          ls -la engines/ || echo "engines directory not found"
          if [ -d "engines" ]; then
            echo "Contents of engines directory:"
            ls -la engines/
          else
            echo "ERROR: engines directory does not exist after download"
            exit 1
          fi
        shell: bash

      - name: Build binary (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cd packages/scanner
          echo "Building binary with PyInstaller..."
          pyinstaller --onefile --hidden-import yaml --add-data "engines:engines" --name tavo-scanner --clean tavo_scanner.py
          echo "Build completed, checking dist directory..."
          ls -la dist/ || echo "dist directory not found"

      - name: Build binary (Windows)
        if: runner.os == 'Windows'
        run: |
          cd packages/scanner
          echo "Building binary with PyInstaller..."
          pyinstaller --onefile --hidden-import yaml --add-data "engines;engines" --name tavo-scanner --clean tavo_scanner.py
          echo "Build completed, checking dist directory..."
          ls -la dist/ || echo "dist directory not found"
        shell: bash

      - name: Set binary name
        id: binary-name
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            echo "name=tavo-scanner.exe" >> $GITHUB_OUTPUT
          else
            echo "name=tavo-scanner" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Test binary
        run: |
          cd packages/scanner/dist
          if [ "${{ runner.os }}" == "Windows" ]; then
            ./tavo-scanner.exe --help
          else
            chmod +x tavo-scanner
            ./tavo-scanner --help
          fi
        shell: bash

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}
          path: packages/scanner/dist/${{ steps.binary-name.outputs.name }}

  create-release:
    name: Create Release
    needs: build-binaries
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && contains(github.event.head_commit.message, 'release'))

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Set version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            # Extract version from commit message or use date-based version
            VERSION="v$(date +%Y.%m.%d-%H%M)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create release archives
        run: |
          mkdir releases
          cd artifacts

          # Create release archives for each platform
          for dir in */; do
            platform="${dir%/}"
            cd "$platform"

            if [[ "$platform" == *"windows"* ]]; then
              zip -r "../../releases/tavo-scanner-${platform}.zip" .
            else
              tar -czf "../../releases/tavo-scanner-${platform}.tar.gz" .
            fi

            cd ..
          done

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: scanner-${{ steps.version.outputs.version }}
          name: Tavo Scanner ${{ steps.version.outputs.version }}
          body: |
            ## Tavo AI Security Scanner ${{ steps.version.outputs.version }}

            This release contains standalone binaries for the Tavo AI Security Scanner.

            ### Downloads

            - **Linux (x64)**: `tavo-scanner-linux-x64.tar.gz`
            - **Linux (ARM64)**: `tavo-scanner-linux-arm64.tar.gz`
            - **macOS (x64)**: `tavo-scanner-macos-x64.tar.gz`
            - **macOS (ARM64)**: `tavo-scanner-macos-arm64.tar.gz`
            - **Windows (x64)**: `tavo-scanner-windows-x64.zip`
            - **Windows (ARM64)**: `tavo-scanner-windows-arm64.zip`

            ### Installation

            1. Download the appropriate archive for your platform
            2. Extract the binary
            3. Make executable (Linux/macOS): `chmod +x tavo-scanner`
            4. Run: `./tavo-scanner --help`

            ### Features

            - Comprehensive LLM security vulnerability detection
            - OWASP LLM Top 10 coverage
            - No external dependencies required
            - Cross-platform support
          files: releases/*.*
          prerelease: ${{ github.event.inputs.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create/Update Latest Release
        if: github.event.inputs.prerelease != true
        uses: softprops/action-gh-release@v2
        with:
          tag_name: scanner-latest
          name: Tavo Scanner Latest
          body: |
            ## Tavo AI Security Scanner - Latest Release

            This is the latest stable release of the Tavo AI Security Scanner.

            **Current Version:** ${{ steps.version.outputs.version }}

            ### Downloads

            - **Linux (x64)**: `tavo-scanner-linux-x64.tar.gz`
            - **Linux (ARM64)**: `tavo-scanner-linux-arm64.tar.gz`
            - **macOS (x64)**: `tavo-scanner-macos-x64.tar.gz`
            - **macOS (ARM64)**: `tavo-scanner-macos-arm64.tar.gz`
            - **Windows (x64)**: `tavo-scanner-windows-x64.zip`
            - **Windows (ARM64)**: `tavo-scanner-windows-arm64.zip`

            ### Installation

            1. Download the appropriate archive for your platform
            2. Extract the binary
            3. Make executable (Linux/macOS): `chmod +x tavo-scanner`
            4. Run: `./tavo-scanner --help`

            ### Features

            - Comprehensive LLM security vulnerability detection
            - OWASP LLM Top 10 coverage
            - No external dependencies required
            - Cross-platform support

            ---
            *This release is automatically updated with each new stable version.*
          files: releases/*.*
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
