name: Publish Java SDK

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to publish"
        required: true
        type: string

jobs:
  publish:
    name: Publish to Maven Central
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          java-version: 17
          distribution: "temurin"
          server-id: central
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name: Update version
        run: |
          cd packages/java || exit 1
          # Update project version in pom.xml (only the main project version after sdk artifactId)
          sed -i '/<artifactId>sdk<\/artifactId>/{
              N
              s/<artifactId>sdk<\/artifactId>\n    <version>[^<]*<\/version>/<artifactId>sdk<\/artifactId>\n    <version>${{ inputs.version }}<\/version>/
          }' pom.xml

      - name: Setup GPG
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          gpg --list-keys

      - name: Build and test
        run: |
          cd packages/java || exit 1
          mvn clean package -DskipTests

      - name: Sign artifacts
        run: |
          cd packages/java || exit 1
          # Sign all artifacts with GPG
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --pinentry-mode loopback --passphrase-fd 0 --detach-sign --armor target/sdk-${{ inputs.version }}.jar
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --pinentry-mode loopback --passphrase-fd 0 --detach-sign --armor target/sdk-${{ inputs.version }}-sources.jar
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --pinentry-mode loopback --passphrase-fd 0 --detach-sign --armor target/sdk-${{ inputs.version }}-javadoc.jar
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --pinentry-mode loopback --passphrase-fd 0 --detach-sign --armor pom.xml

      - name: Create bundle
        run: |
          cd packages/java || exit 1
          # Create bundle ZIP following Maven Repository Layout
          # Central Portal requires proper directory structure: groupId/artifactId/version/
          # All files must be in the correct Maven repository path with checksums

          # Create the Maven repository structure
          mkdir -p /tmp/bundle/net/tavoai/sdk/${{ inputs.version }}

          # Copy all artifacts to the correct Maven path
          cp pom.xml /tmp/bundle/net/tavoai/sdk/${{ inputs.version }}/sdk-${{ inputs.version }}.pom
          cp pom.xml.asc /tmp/bundle/net/tavoai/sdk/${{ inputs.version }}/sdk-${{ inputs.version }}.pom.asc
          cp target/sdk-${{ inputs.version }}.jar /tmp/bundle/net/tavoai/sdk/${{ inputs.version }}/
          cp target/sdk-${{ inputs.version }}.jar.asc /tmp/bundle/net/tavoai/sdk/${{ inputs.version }}/
          cp target/sdk-${{ inputs.version }}-sources.jar /tmp/bundle/net/tavoai/sdk/${{ inputs.version }}/
          cp target/sdk-${{ inputs.version }}-sources.jar.asc /tmp/bundle/net/tavoai/sdk/${{ inputs.version }}/
          cp target/sdk-${{ inputs.version }}-javadoc.jar /tmp/bundle/net/tavoai/sdk/${{ inputs.version }}/
          cp target/sdk-${{ inputs.version }}-javadoc.jar.asc /tmp/bundle/net/tavoai/sdk/${{ inputs.version }}/

          # Generate checksums for each file
          cd /tmp/bundle/net/tavoai/sdk/${{ inputs.version }} || exit 1
          for file in *; do
            if [ -f "$file" ]; then
              md5sum "$file" | cut -d' ' -f1 > "$file.md5"
              sha1sum "$file" | cut -d' ' -f1 > "$file.sha1"
            fi
          done

          # Debug: List files in the Maven structure
          echo "üìÅ Files in Maven repository structure:"
          find /tmp/bundle -type f | sort

          # Create the bundle zip from the root
          cd /tmp/bundle || exit 1
          zip -r ${{ github.workspace }}/bundle.zip .

          # Debug: Check zip contents
          echo "üì¶ Bundle contents:"
          unzip -l ${{ github.workspace }}/bundle.zip

      - name: Publish to Maven Central
        run: |
          cd packages/java || exit 1

          # Check if bundle exists
          if [ ! -f "${{ github.workspace }}/bundle.zip" ]; then
            echo "‚ùå Bundle file not found at ${{ github.workspace }}/bundle.zip"
            ls -la ${{ github.workspace }}/
            exit 1
          fi

          echo "üì¶ Bundle file size: $(du -h ${{ github.workspace }}/bundle.zip | cut -f1)"

          # Upload bundle to Central Portal
          echo "üì§ Uploading bundle to Central Portal..."
          response=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST \
            -H "Authorization: Basic $(echo -n '${{ secrets.MAVEN_USERNAME }}:${{ secrets.MAVEN_PASSWORD }}' | base64 -w 0)" \
            -F "bundle=@${{ github.workspace }}/bundle.zip" \
            https://central.sonatype.com/api/v1/publisher/upload)

          # Extract HTTP status and response body
          http_status=$(echo "$response" | grep "HTTP_STATUS:" | cut -d: -f2)
          response_body=$(echo "$response" | sed '/HTTP_STATUS:/d')

          if [ "$http_status" -eq 201 ]; then
            echo "‚úÖ Bundle uploaded successfully!"
            echo "üì¶ Response: $response_body"
            # Try to extract deployment ID, fallback gracefully if not JSON
            deployment_id=$(echo "$response_body" | jq -r '.deploymentId' 2>/dev/null || echo "unknown")
            echo "üì¶ Deployment ID: $deployment_id"
          else
            echo "‚ùå Upload failed with status $http_status"
            echo "Response: $response_body"
            exit 1
          fi

      - name: Create source archive
        run: |
          cd packages/java
          # Create source code archive
          tar -czf ../../tavo-java-sdk-v${{ inputs.version }}-source.tar.gz .

      - name: Upload source archive to release
        run: |
          # Upload the source archive to the GitHub release
          gh release upload v${{ inputs.version }} ../tavo-java-sdk-v${{ inputs.version }}-source.tar.gz --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Git tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag sdk-java-v${{ inputs.version }}
          git push origin sdk-java-v${{ inputs.version }}

      - name: Notify success
        run: |
          echo "‚úÖ Java SDK v${{ inputs.version }} published successfully!"
          echo "üì¶ Available on Maven Central: https://search.maven.org/artifact/net.tavoai/sdk/${{ inputs.version }}/jar"
