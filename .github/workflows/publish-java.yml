name: Publish Java SDK

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to publish"
        required: true
        type: string

jobs:
  publish:
    name: Publish to Maven Central
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          java-version: 17
          distribution: "temurin"
          server-id: central
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name: Update version
        run: |
          cd packages/java || exit 1
          # Update project version in pom.xml (only the main project version after sdk artifactId)
          sed -i '/<artifactId>sdk<\/artifactId>/{
              N
              s/<artifactId>sdk<\/artifactId>\n    <version>[^<]*<\/version>/<artifactId>sdk<\/artifactId>\n    <version>${{ inputs.version }}<\/version>/
          }' pom.xml

      - name: Build and test
        run: |
          cd packages/java || exit 1
          mvn clean package -DskipTests

      - name: Create bundle
        run: |
          cd packages/java || exit 1
          # Create bundle ZIP with all required artifacts at root level
          # Central Portal requires all files to be at the root of the bundle
          # and checksum files (.md5, .sha1) for each artifact
          mkdir -p /tmp/bundle

          # Copy all artifacts
          cp pom.xml /tmp/bundle/
          cp target/sdk-${{ inputs.version }}.jar /tmp/bundle/
          cp target/sdk-${{ inputs.version }}-sources.jar /tmp/bundle/
          cp target/sdk-${{ inputs.version }}-javadoc.jar /tmp/bundle/

          # Generate checksums for each file
          cd /tmp/bundle || exit 1
          for file in *; do
            if [ -f "$file" ]; then
              md5sum "$file" | cut -d' ' -f1 > "$file.md5"
              sha1sum "$file" | cut -d' ' -f1 > "$file.sha1"
            fi
          done

          # Create the bundle
          zip -r ${{ github.workspace }}/bundle.zip .

      - name: Publish to Maven Central
        run: |
          cd packages/java || exit 1

          # Upload bundle to Central Portal
          echo "üì§ Uploading bundle to Central Portal..."
          response=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST \
            -H "Authorization: Basic $(echo -n '${{ secrets.MAVEN_USERNAME }}:${{ secrets.MAVEN_PASSWORD }}' | base64 -w 0)" \
            -F "bundle=@../bundle.zip" \
            https://central.sonatype.com/api/v1/publisher/upload)

          # Extract HTTP status and response body
          http_status=$(echo "$response" | grep "HTTP_STATUS:" | cut -d: -f2)
          response_body=$(echo "$response" | sed '/HTTP_STATUS:/d')

          if [ "$http_status" -eq 201 ]; then
            echo "‚úÖ Bundle uploaded successfully!"
            echo "üì¶ Deployment ID: $(echo "$response_body" | jq -r '.deploymentId // "unknown"')"
          else
            echo "‚ùå Upload failed with status $http_status"
            echo "Response: $response_body"
            exit 1
          fi

      - name: Create Git tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Check if tag already exists
          if git tag -l | grep -q "^java-v${{ inputs.version }}$"; then
            echo "‚ö†Ô∏è  Tag java-v${{ inputs.version }} already exists, skipping tag creation"
          else
            git tag java-v${{ inputs.version }}
            git push origin java-v${{ inputs.version }}
            echo "‚úÖ Created and pushed tag java-v${{ inputs.version }}"
          fi

      - name: Notify success
        run: |
          echo "‚úÖ Java SDK v${{ inputs.version }} published successfully!"
          echo "üì¶ Available on Maven Central: https://search.maven.org/artifact/net.tavoai/sdk/${{ inputs.version }}/jar"
